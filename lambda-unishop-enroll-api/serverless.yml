service: unishop-enroll-api

plugins:
  - serverless-domain-manager

custom:
  verifyTokenArns:
    dev: arn:aws:lambda:ap-northeast-2:153874506602:function:unishop-authorization-dev-verifyToken
    prod: arn:aws:lambda:ap-northeast-2:153874506602:function:unishop-authorization-prod-verifyToken
  useVerifyTokenArn: ${self:custom.verifyTokenArns.${self:provider.stage}}
  domains:
    dev: member-calls2-kr-dev.unicity.com
    prod: member-calls2-kr.unicity.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: ${self:provider.stage}
    basePath: ${self:provider.environment.MODULE_KEY}
  dbConfigs:
    dev:
      host: "calls-kr.cluster-cs23rdjjrds4.ap-northeast-2.rds.amazonaws.com"
      dbName: "calls-kr-dev"
      user: "lambdaKrDev"
      password: "FzTPpDeezTtFW2gS"
    prod:
      host: "calls-kr.cluster-cs23rdjjrds4.ap-northeast-2.rds.amazonaws.com"
      dbName: "calls-kr"
      user: "lambdaKr"
      password: "rdStaC9s9rQ2HeHl"

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  endpointType: regional
  apiName: unishop_${self:provider.environment.MODULE_KEY}_${self:provider.stage}
  deploymentBucket: ushop-serverless-applications-kor
  environment:
    MODULE_KEY: enroll
    DB_HOST: ${self:custom.dbConfigs.${self:provider.stage}.host}
    DB_DBNAME: ${self:custom.dbConfigs.${self:provider.stage}.dbName}
    DB_USER: ${self:custom.dbConfigs.${self:provider.stage}.user}
    DB_PASSWORD: ${self:custom.dbConfigs.${self:provider.stage}.password}
    S3_BUCKET_TEMP: temp.ushop.unicity.com
    S3_BUCKET_PRIVATE: private.ushop.unicity.com
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "arn:aws:s3:::*"

functions:
  verificationGetList:
    handler: src/controllers/verificationController.getList
    events:
      - http:
          path: /verification
          method: get
          cors: true

  verificationEditMultiple:
    handler: src/controllers/verificationController.editMultiple
    events:
      - http:
          path: /verification
          method: patch
          cors: true
          authorizer:
            arn: ${self:custom.useVerifyTokenArn}
            resultTtlInSeconds: 0

  verificationMoveImages:
    handler: src/controllers/verificationController.moveImages
    events:
      - http:
          path: /moveImages/verification
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.useVerifyTokenArn}
            resultTtlInSeconds: 0

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
